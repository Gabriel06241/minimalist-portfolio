---
interface Props {
  title: string;
}

import { ViewTransitions } from "astro:transitions";
import Toggle from "@/components/ThemeChange.astro";

import { basics } from "@cv";

const { title } = Astro.props;
const { image, summary, url } = basics;
---

<!doctype html>
<html lang="en">
  <head>
    <ViewTransitions />
    <meta charset="UTF-8" />
    <title>{title}</title>
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="preload" as="image" href={image} />

    <meta property="og:url" content={url} />
    <meta property="og:type" content="website" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={summary} />
    <meta property="og:image" content="" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta property="twitter:domain" content={url.split("//")[1] ?? ""} />
    <meta property="twitter:url" content={url} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={summary} />
    <meta name="twitter:image" content="" />
  </head>
  <body>
    <nav class="no-print">
      <ul>
        <li id="enLanguage">
          <a href="#en" lang="en">Ingles</a>
        </li>
        <li id="esLanguage">
          <a href="#es" lang="es">Espa√±ol</a>
        </li>
      </ul>
      <Toggle />
    </nav>
    <slot />
    <script is:inline>
      const english = document.getElementById("enLanguage");
      const spanish = document.getElementById("esLanguage");

      english?.addEventListener("click", (event) => {
        console.log("english ", event.target.innerText);
        console.log("english ", event.target.lang);
        const lang = event.target.lang;
        changeLanguage(lang);
      });

      spanish?.addEventListener("click", (event) => {
        console.log("spanish ", event.target.innerText);
        console.log("spanish ", event.target.lang);
        const lang = event.target.lang;
        changeLanguage(lang);
      });

      function setLanguagePreference(lang) {
        localStorage.setItem("language", lang);
        // location.reload();
      }

      async function fetchLanguageData(lang) {
        console.log(lang);
        // const response = await import(`./../../cv-${lang}.json`);
        const { default: jsonData } = await import(`./../../cv-${lang}.json`, {
          assert: { type: "json" },
        });
        console.log(jsonData);
        return jsonData;
      }

      async function changeLanguage(lang) {
        setLanguagePreference(lang);

        const langData = await fetchLanguageData(lang);
        console.log(langData);
      }
    </script>

    <style is:global>
      html {
        font-family:
          Menlo,
          Monaco,
          Lucida Console,
          "Courier New",
          Courier,
          monospace;
        letter-spacing: -0.025rem;
        color: var(--color-text-2);
        background-color: var(--color-bg);
      }

      body,
      figure {
        margin: 0;
        padding: 0;
      }

      a {
        text-decoration: none;
      }

      ul {
        list-style: none;
        margin: 0;
        padding: 0;
      }

      *,
      *::before,
      *::after {
        box-sizing:;
      }

      h1,
      h2,
      h3,
      h4 {
        margin: 0;
        font-family:
          system-ui,
          -apple-system,
          BlinkMacSystemFont,
          "Segoe UI",
          Roboto,
          Oxygen,
          Ubuntu,
          Cantarell,
          "Open Sans",
          "Helvetica Neue",
          sans-serif;
      }

      p {
        color: var(--color-text-2);
        font-size: 0.9rem;
        line-height: 1.5;
        margin: 0;
        text-wrap: pretty;
      }

      .print {
        display: none !important;
      }

      @media print {
        .no-print {
          display: none !important;
        }

        .print {
          display: block !important;
        }

        astro-dev-toolbar {
          display: none !important;
        }

        article {
          color: var(--color-text-1);
          break-inside: avoid;
        }

        p {
          color: var(--color-text-1);
        }
      }

      :root {
        --color-bg: #f2f2f2;
        --color-bg-kbd: #4441;
        --color-text-6: #666;
        --color-text-4: #444;
        --color-text-3: #333;
        --color-text-2: #222;
        --color-text-1: #111;
        --color-text-0: #000;
        --nav-text: #000;
        --code: #f2f2f2;
        --block-quote-border: #999;
        --block-quote-text: #222;
        --slider-bg: #dddddd;
        --slider-bg-before: #fff;
        --slider-input-bg: #8758ff;
      }

      [data-theme="light"] {
        --color-bg: #f2f2f2;
        --color-bg-kbd: #4441;
        --color-text-6: #666;
        --color-text-4: #444;
        --color-text-3: #333;
        --color-text-2: #222;
        --color-text-1: #111;
        --color-text-0: #000;
        --nav-text: #000;
        --code: #f2f2f2;
        --block-quote-border: #999;
        --block-quote-text: #222;
        --slider-bg: #dddddd;
        --slider-bg-before: #fff;
        --slider-input-bg: #8758ff;
      }

      [data-theme="dark"] {
        --color-bg: #111;
        --color-bg-kbd: #222;
        --color-text-0: #fff;
        --color-text-1: #eee;
        --color-text-2: #ddd;
        --color-text-3: #ccc;
        --color-text-4: #bbb;
        --color-text-6: #aaa;
        --nav-text: #aaa;
        --code: #f2f2f2;
        --block-quote-border: #8e32dc;
        --block-quote-text: #dddddd;
      }

      nav {
        display: flex;
        position: relative;
        justify-content: flex-end;
        padding: 0.5rem 1rem 0 0;
        margin: 0.5rem 1rem 0 0;
      }

      nav ul {
        display: flex;
        margin: 0.5rem;
        padding: 0.5rem;
      }

      nav ul li {
        margin: 0.1rem;
        padding: 0.1rem;
      }
    </style>
  </body>
</html>
